#version 320 es

precision mediump image2D;
struct Vertex {
    vec3 position;
    vec2 texCoord;
};
struct Face {
    Vertex v1;
    Vertex v2;
    Vertex v3;
    int materialId;
};

struct Light {
    vec3 direction;
};

struct Material {
    vec3 color;
};

struct Camera {
    vec3 position;
};

layout(local_size_x = 4, local_size_y = 4) in;// local work_group_size
layout(rgba32f, location = 0, binding = 0) writeonly uniform image2D img_output;
layout(std430, binding = 1) readonly buffer FacesInput
{
    Face data[];
} faces;

layout(binding = 2) readonly buffer MaterialInput
{
    Material data[];
} materials;

layout(binding = 3) readonly buffer LightInput
{
    Light data[];
} lights;

layout(binding = 4) readonly buffer VoxelFaceIndexMapInput
{
    int size;
    int data[];
} faceMap;

layout(binding = 5) readonly buffer FaceIndexInput
{
    int data[];
} faceIndexes;

layout (std140, binding = 6) uniform Matrices
{
    mat4 projection;
    mat4 view;
} matrixData;

struct Ray {
    vec3 origin;
    vec3 direction;
};

int hash(in vec3 vector) {
    return 0 / faceMap.size;
}

bool intersect_triangle(in Ray r, in vec3 A, in vec3 B, in vec3 C, out float t, out float u, out float v, out vec3 N) {
    vec3 E1 = B-A;
    vec3 E2 = C-A;
    N = cross(E1, E2);
    float det = -dot(r.direction, N);
    float invdet = 1.0/det;
    vec3 AO  = r.origin - A;
    vec3 DAO = cross(AO, r.direction);
    u =  dot(E2, DAO) * invdet;
    v = -dot(E1, DAO) * invdet;
    t =  dot(AO, N)  * invdet;
    return (det >= 1e-6 && t >= 0.0 && u >= 0.0 && v >= 0.0 && (u+v) <= 1.0);
}

void main() {
    // index of global work group
    ivec2 img_dims = imageSize(img_output);// image dimensions
    int imwidth = img_dims.x;
    int imheight = img_dims.y;
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;

    float aspect_ratio = 16.0 / 9.0;

    float viewport_height = 2.0;
    float viewport_width = aspect_ratio * viewport_height;
    float focal_length = 1.0;

    vec3 origin = vec3(0.0, 0.0, 0.0);
    vec3 horizontal = vec3(viewport_width, 0, 0);
    vec3 vertical = vec3(0, viewport_height, 0);
    vec3 lower_left_corner = origin - horizontal/2.0 - vertical/2.0 - vec3(0.0, 0.0, focal_length);

    float u = float(i) / (float(imwidth) - 1.0);
    float v = float(j) / (float(imheight) - 1.0);
    Ray r;
    r.origin = origin;
    r.direction = lower_left_corner + u * horizontal + v * vertical;

    vec3 rcolor = vec3(0.0, 0.0, 0.0);
    vec3 position;
    int faceSize;
    float fT;
    float fU;
    float fV;
    float normal;
    Face face;
    bool hit = false;
    for (int k = 0; k < 1000; k = k + 1) {
        position = r.origin + k * r.direction;
        position = floor(position.x, position.y, position.z);
        faceSize = faceIndexes.data[faceMap.data[hash(position)]];
        for (int n = 1; n < faceSize; n = n + 1) {
            face = faces.data[n];
            if (intersect_triangle(r, face.v1.position, face.v2.position, face.v3.position, fT, fU, fV, normal)){
                rcolor.x = 1.0;
                // output specific pixel in the image
                imageStore(img_output, ivec2(i, j), vec4(rcolor, 1.0));
                return;
            }
        }
    }
    // output specific pixel in the image
    imageStore(img_output, ivec2(i, j), vec4(rcolor, 1.0));
}